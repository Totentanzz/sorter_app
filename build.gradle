plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

project.configurations.implementation.canBeResolved = true
project.configurations.compileOnly.canBeResolved = true

def java_home = hasProperty('org.gradle.java.home') ? getProperty('org.gradle.java.home') : System.getenv('JAVA_HOME')

group 'com.po_lab.sorter'
version '1.0.0'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    mainModule = 'com.po_lab.sorter.app'
    mainClass = 'com.po_lab.sorter.app.Main'
}

dependencies {
    compileOnly fileTree(dir: 'lib/javafx-21/sdk/bin',includes: ['*.dll'])
}

javafx {
    sdk = 'lib/javafx-21/sdk'
    configuration = 'implementation'
    modules = ['javafx.controls','javafx.fxml','javafx.base','javafx.graphics']
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.po_lab.sorter.app.Main',
        )
    }
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    targetPlatform('windows-x64', "${java_home}")
    addExtraModulePath 'lib/javafx-21/jmods'
    launcher {
        name = 'app'
    }

}

jlinkZip {
    group = 'distribution'
}

task nativeToJar(type: Jar) {
    destinationDir file("$buildDir/libs")
    archiveFileName = 'javafx-native.jar'
    from fileTree(dir: 'lib/javafx-21/sdk/bin', include: ['*.dll'])
}

task fatJar(type: Jar) {
    dependsOn 'jar'
    duplicatesStrategy = duplicatesStrategy.EXCLUDE;
    archiveFileName = "fatJar.jar"

    manifest {
        attributes(
                'Main-Class': 'com.po_lab.sorter.app.Main',
        )
    }
    from(
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) },
        configurations.compileOnly.collect()
    ) with jar
}
